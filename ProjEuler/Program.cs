using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Collections;

namespace ProjEuler
{
	class MainClass
	{
		public static void Main(string[] args)
		{
			//Console.WriteLine("~~~~~ My C# Proj Euler exercises. ~~~~~");
			//Console.WriteLine("Problem 1");
			//Prob1 prob1 = new Prob1();
			//Console.WriteLine(prob1.allInOne(1000));

            //Console.WriteLine("-> Problem 2");
            //Prob2 prob2 = new Prob2();
            //Console.WriteLine("The answer : " + prob2.fiboevensummer());

			//Prob2a prob2a = new Prob2a();
			//prob2a.gogo();

            Prob7 prob7 = new Prob7();
            prob7.gogo();

		}
	}

	class Prob1
	{   /*If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
		Find the sum of all the multiples of 3 or 5 below 1000.
		*/
		public long allInOne(long upperlimit)
		{
			long sum = 0L;
			long count;
			for (count = 1; count < upperlimit; count++)
			{
				if ((count % 3) == 0 && (count % 5) == 0)
				{
					//Console.WriteLine("Yay Both : " + count);
					sum += count;
				}
				else if (count % 3 == 0)
				{
					//Console.WriteLine("Yay 3 : " + count);
					sum += count;
				}
				else if (count % 5 == 0)
				{
					//Console.WriteLine("Yay 5 : " + count);
					sum += count;
				}

			}

			return sum;
		}
	}

	class Prob2
	{		/*Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
			By starting with 1 and 2, the first 10 terms will be: 
			1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
			By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
			*/
		public long fiboevensummer()
		{
			
			long evensum = 0;

            var fiboarr = new List<long>{1,2};

            int n = 1;
            //fiboarr.Add(fiboarr[n] + fiboarr[n - 1]);

            while (fiboarr[n] < 4000000)
            {
                Console.WriteLine(n + "n is : " + fiboarr[n]);
                if (fiboarr[n] % 2 == 0) {
                    //Console.WriteLine(evensum);
                    evensum += fiboarr[n];
                    //Console.WriteLine(evensum);
                }
                fiboarr.Add(fiboarr[n] + fiboarr[n - 1]);
                n++;
                //Console.WriteLine(n + " n is : " + fiboarr[n]);

            }

			return evensum;
		}


	}

	class Prob2a
	{
		public IEnumerable<int> intGenerator()
		{
			yield return 1;
			yield return 2;
			yield return 3;

		}

		public void gggg()
		{
			foreach (int i in intGenerator())
			{
				Console.WriteLine(i.ToString());
			}
		}
		public IEnumerable<long> fibogen()
		{
			long a, b, orig_a;
			a = 0;
			b = 1;

			while (true)
			{
				yield return a;
				orig_a = a;
				a = b;
				b = orig_a + b;

			}
		}
		public void gogo(){
			long count = 0;
			foreach(long i in fibogen()){
				Console.WriteLine(i.ToString());
				count += 1;
				if(count >= 100){
					break;
				}
			}
		}


	}

/* 
 * 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
 * What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
 */

	class Prob5
	{
		public bool divtester(int number)
		{


			return true;
		}
	}
/*
 * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
 * What is the 10 001st prime number?
 * 
 */
    class Prob7
    {
        public IEnumerable<long> primeGenerator()
        {
            long count = 1;
            while(true) 
            {
                count++;
                if (count == 2) {
                    yield return 2;
                }
                if (count % 2 == 0 ) {
                    yield return count;
                }
            }
        }
        public void gogo()
        {
            foreach( long i in primeGenerator()){
                Console.WriteLine(i.ToString());
                if(i >= 100){
                    break;
                }
            }
        }
    }
}



